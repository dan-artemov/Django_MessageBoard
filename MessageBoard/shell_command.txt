
# Импорт необходимых модулей
from Board.models import *
# from django.db.models import Sum
from datetime import datetime


# 1. Создадим трех произвольных пользователей
us1 = User.objects.create_user('us1')
us2 = User.objects.create_user('us2')
us3 = User.objects.create_user('us3')

# 2. Добавим несколько объявлений.

M1=Message.objects.create(message_user=us1, category='DD', message_header='Полный список вопросов с собеседований по Python для дата-сайентистов и инженеров', message_text='Бывает, что компания ищет дата-сайентиста, а на самом деле ей нужен Python-разработчик. Поэтому при подготовке к собеседованию есть смысл освежить в памяти информацию по Python, а не только штудировать алгоритмы. Перевели статью разработчика, который не раз попадал в такую ситуацию и на основе своего опыта составил список из 53 вопросов и ответов для подготовки к собеседованию. Большинство исследователей данных пишут много кода, поэтому такой список пригодится и дата-сайентистам, и инженерам. Он будет полезен и для соискателей, и для тех, кто проводит собеседования, и для тех, кто просто изучает Python. Вопросы идут в случайном порядке. Поехали. 1. В чем разница между списком и кортежем? Мне задавали этот вопрос буквально на каждом собеседовании по Python/data science. Выучите ответ как свои пять пальцев: Список можно изменить после создания. Кортеж нельзя изменить после создания. Список упорядочен. Он представляет собой упорядоченные последовательности объектов, как правило, одного и того же типа. Например, все имена пользователей упорядочены по дате создания. У кортежа есть структура. В каждом индексе могут сосуществовать различные типы данных.')
M2=Message.objects.create(message_user=us2, category='Tanners', message_header='10 полезных сочетаний клавиш в PyCharm', message_text='Сегодня я хочу поделиться с вами своими лайфхаками касательно работы в PyCharm, ведь мы все хотим сократить время разрабатывая проект, а в этом нам помогут быстрые команды при помощи сочетаний клавиш. Так как я предпочитаю пользоваться операционной системой семейства Windows, сочетания клавиш будут заточены под нее. Перед тем как применять данные комбинации, проследите за тем чтобы у вас стояла английская раскладка, иначе, команды будут совсем другие. Быстрое изменение регистра. Иногда полезно быстро изменить регистр слов с верхнего на нижний, или наоборот, в этом нам поможет сочетание клавиш Ctrl + Shift + U. Быстрое форматирование кода по стандарту PEP 8. Скопированный код с сайта чаще всего требует форматирования, особенно это касается отступов, вручную это делать долго и нудно, поэтому существует команда Ctrl + Alt + L, она в миг исправит все ошибки форматирования в коде и расставит все по своим местам. Закомментировать код.Очень полезное и всеми любимое сочетание клавиш быстрого закомментирования текста, выручает, когда закомментировать часть кода чтобы избежать его выполнения Ctrl + /')


# 3. Создадим отклики к разным объектам модели Message (в каждом объекте должен быть как минимум один комментарий).
C1_2 = Comment.objects.create(comment_message=M1, user=us2, comment='Бестолковая статья, моя лучше')
C1_3 = Comment.objects.create(comment_message=M1, user=us3, comment='Отличная статья')
C1_1 = Comment.objects.create(comment_message=M1, user=us1, comment='US1 статья')
C2_1 = Comment.objects.create(comment_message=M2, user=us1, comment='Это статья норм')
C2_3 = Comment.objects.create(comment_message=M2, user=us3, comment='Отличная статья')
C2_2 = Comment.objects.create(comment_message=M2, user=us2, comment='US2 статья')


# 4. Выведем все отклики к статьям автора us1 и us2
au1 = Message.objects.get(message_user = us1)
au2 = Message.objects.get(message_user = us2)

print(f'Отклики на пост автора объявлений: {au1.c_message.all()}')
print(f'Отклики на пост автора объявлений: {au2.c_message.all()}')

# 5. Отклоним и примем часть откликов
au1.c_message.get(id=1).accept_the_comment()
au1.c_message.get(id=2).reject_the_comment()
au2.c_message.get(id=3).accept_the_comment()
au2.c_message.get(id=4).reject_the_comment()

# Конец

